#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
sys.path.append('/usr/lib/python2.7/site-packages/')
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import BloomFilter
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void inc(i64 id, i64 content)'
  print '  i32 count(i64 id, i64 content)'
  print '  void dec(i64 id, i64 content)'
  print '  void add(i64 id, i64 content)'
  print '  bool contains(i64 id, i64 content)'
  print '   bulk_contains( ids,  contents)'
  print '  void aged_inc(i64 id, i64 content)'
  print '  i32 aged_count(i64 id, i64 content)'
  print '  void aged_dec(i64 id, i64 content)'
  print '  void commonality_add(i64 id, i64 content)'
  print '  void direct_commonality_add(i64 id, i64 content)'
  print '  bool is_common(i64 id, i64 content)'
  print '  void delete_bloom_filter(i64 id)'
  print '  bool is_bloom_filter_present(i64 id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BloomFilter.Client(protocol)
transport.open()

if cmd == 'inc':
  if len(args) != 2:
    print 'inc requires 2 args'
    sys.exit(1)
  pp.pprint(client.inc(eval(args[0]),eval(args[1]),))

elif cmd == 'count':
  if len(args) != 2:
    print 'count requires 2 args'
    sys.exit(1)
  pp.pprint(client.count(eval(args[0]),eval(args[1]),))

elif cmd == 'dec':
  if len(args) != 2:
    print 'dec requires 2 args'
    sys.exit(1)
  pp.pprint(client.dec(eval(args[0]),eval(args[1]),))

elif cmd == 'add':
  if len(args) != 2:
    print 'add requires 2 args'
    sys.exit(1)
  pp.pprint(client.add(eval(args[0]),eval(args[1]),))

elif cmd == 'contains':
  if len(args) != 2:
    print 'contains requires 2 args'
    sys.exit(1)
  pp.pprint(client.contains(eval(args[0]),eval(args[1]),))

elif cmd == 'bulk_contains':
  if len(args) != 2:
    print 'bulk_contains requires 2 args'
    sys.exit(1)
  pp.pprint(client.bulk_contains(eval(args[0]),eval(args[1]),))

elif cmd == 'aged_inc':
  if len(args) != 2:
    print 'aged_inc requires 2 args'
    sys.exit(1)
  pp.pprint(client.aged_inc(eval(args[0]),eval(args[1]),))

elif cmd == 'aged_count':
  if len(args) != 2:
    print 'aged_count requires 2 args'
    sys.exit(1)
  pp.pprint(client.aged_count(eval(args[0]),eval(args[1]),))

elif cmd == 'aged_dec':
  if len(args) != 2:
    print 'aged_dec requires 2 args'
    sys.exit(1)
  pp.pprint(client.aged_dec(eval(args[0]),eval(args[1]),))

elif cmd == 'commonality_add':
  if len(args) != 2:
    print 'commonality_add requires 2 args'
    sys.exit(1)
  pp.pprint(client.commonality_add(eval(args[0]),eval(args[1]),))

elif cmd == 'direct_commonality_add':
  if len(args) != 2:
    print 'direct_commonality_add requires 2 args'
    sys.exit(1)
  pp.pprint(client.direct_commonality_add(eval(args[0]),eval(args[1]),))

elif cmd == 'is_common':
  if len(args) != 2:
    print 'is_common requires 2 args'
    sys.exit(1)
  pp.pprint(client.is_common(eval(args[0]),eval(args[1]),))

elif cmd == 'delete_bloom_filter':
  if len(args) != 1:
    print 'delete_bloom_filter requires 1 args'
    sys.exit(1)
  pp.pprint(client.delete_bloom_filter(eval(args[0]),))

elif cmd == 'is_bloom_filter_present':
  if len(args) != 1:
    print 'is_bloom_filter_present requires 1 args'
    sys.exit(1)
  pp.pprint(client.is_bloom_filter_present(eval(args[0]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
